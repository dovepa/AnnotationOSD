{"ast":null,"code":"import _asyncToGenerator from \"/home/dove/Documents/tchek/AnnotationOSD/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AnnotationOSDService {\n  /**\n   * Constructor of service for init a new player.\n   * @param debug set true to active debug mode on player.\n   */\n  constructor(debug = false) {\n    this.DEBUG = debug;\n  }\n  /**\n   * Create a new player factory.\n   * @param type Type of player, dzi or image (jpeg, png, etc...)\n   * @param id Id of player inside html.\n   * @param link Link to image.\n   */\n  playerFactory(type, id, link) {\n    return new Promise(resolve => {\n      this.viewer = OpenSeadragon({\n        id,\n        tileSources: type === 'dzi' ? link : {\n          type: 'image',\n          url: link\n        },\n        gestureSettingsTouch: {\n          pinchRotate: false\n        },\n        showRotationControl: false,\n        showNavigationControl: false,\n        showFlipControl: false,\n        zoomPerClick: 1,\n        imageLoaderLimit: 1,\n        constrainDuringPan: true,\n        debugMode: this.DEBUG\n      });\n      const subjectZoom = new Subject();\n      this.viewer.addHandler('zoom', e => {\n        subjectZoom.next(e);\n      });\n      subjectZoom.pipe(debounceTime(50)).subscribe(() => {\n        this.calculateRatio();\n        this.resetStrokeWidth();\n      });\n      this.viewer.addOnceHandler('open', () => {\n        this.calculateRatio();\n        resolve(this);\n      });\n      // on open, buildsScene\n      this.viewer.addHandler('open', () => {\n        this.buildScene();\n      });\n      const subjectResize = new Subject();\n      this.viewer.addHandler('resize', e => {\n        subjectResize.next(e);\n      });\n      subjectResize.pipe(debounceTime(200)).subscribe(() => {\n        this.goHome();\n      });\n    });\n  }\n  /**\n   * Delete all subscribers canvas and player.\n   */\n  delete() {\n    this.canvas.clear();\n    this.canvas.dispose();\n    this.canvas.removeListeners();\n    this.viewer.destroy();\n  }\n  /**\n   * Add fabric canvas over viewport\n   */\n  addCanvas() {\n    this.canvas = this.viewer.fabricjsOverlay({\n      scale: 1000\n    }).fabricCanvas();\n    return this;\n  }\n  /**\n   * Auto reset the size of fabric elements when user zoom on canvas, or page resize.\n   * @private\n   */\n  resetStrokeWidth() {\n    if (this.canvas) {\n      const w = 2; // desired width in pixels\n      const strokeWidth = w / this.canvas.getZoom();\n      for (const object of this.canvas.getObjects()) {\n        object.set('strokeUniform', true);\n        object.set('strokeWidth', strokeWidth);\n        // @ts-ignore\n        if (object.get('radius')) {\n          // @ts-ignore\n          object.set('radius', 5 / this.canvas.getZoom());\n        }\n        // can also update other things here\n      }\n    }\n  }\n  /**\n   * Calculate ratio of canvas when user load image or resize page.\n   * @private\n   */\n  calculateRatio() {\n    this.imageWidth = this.viewer.source.dimensions.x;\n    this.imageHeight = this.viewer.source.dimensions.y;\n    this.containerWidth = this.viewer.viewport.getContainerSize().x;\n    this.containerHeight = this.viewer.viewport.getContainerSize().y;\n    this.zoomToZoomLevelRatio = this.containerWidth / this.imageWidth;\n    this.scale = this.viewer.viewport.getZoom(true) * this.zoomToZoomLevelRatio;\n  }\n  /**\n   * Center canvas inside viewport or go to home point if exist.\n   */\n  goHome() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      //this.viewer.viewport.goHome(false);\n      return _this;\n    })();\n  }\n  /**\n   * Set home point.\n   * @param point Point at center of region.\n   * @param width Width of region.\n   * @param height Height of region.\n   */\n  setHome(point, width, height) {\n    //this.viewer.viewport.zoomTo(5);\n    let t = new OpenSeadragon.Point(100, 100);\n    console.log(this.viewer.viewport.deltaPixelsFromPoints(t, true));\n    this.viewer.viewport.windowToViewportCoordinates(new OpenSeadragon.Point(100, 100));\n    // this.viewer.viewport.zoomTo(5);\n    // const homePoint = this.viewer.viewport.imageToViewerElementCoordinates(new OpenSeadragon.Point(this.imageWidth / 2, this.imageHeight / 2));\n    // const w = this.imageWidth / width;\n    // const h = this.imageHeight / height;\n    // const zoom = 4; // w > h ? h : w;\n    // console.log(homePoint, zoom, this.imageWidth, this.imageHeight);\n    // this.viewer.viewport.zoomTo(1.2, homePoint, false);\n    return this;\n  }\n  buildHome(viewerBounds) {\n    if (url.includes('pg=' + pgn)) {\n      // set sceneCoords equal to the string stored in the scenes Array\n      var sceneCoords = this.scenes[pgn - 1];\n      // Create coordArray by spliting sceneCoords after every comma\n      var coordArray = sceneCoords.split(',');\n      // If no rotation is passed via the coordinates subfield in the backend, set rotation var equal to 0\n      if (coordArray[4] == null) {\n        coordArray[4] = 0;\n      } else {\n        this.viewer.viewport.setRotation(parseInt(coordArray[4], 10));\n      }\n      // Set scene to a new openseadragon rectangle, pass in all the coords from the ViewerBounds passed when the scene was built on page load\n      var scene = new OpenSeadragon.Rect(parseFloat(viewerBounds.x), parseFloat(viewerBounds.y), parseFloat(viewerBounds.width), parseFloat(viewerBounds.height));\n      this.viewer.viewport.fitBounds(scene, true);\n      // Debug\n      console.log('scene var used in buildHome (should match viewer.viewport.getBounds during buildScene):\\nX: ' + scene.x + ', Y: ' + scene.y + ', W: ' + scene.width + ', H: ' + scene.height);\n    }\n  }\n  // Checks page url, depending on page number, loads the proper rectangle defined above, remaps the homebtn to match the scene built from this\n  buildScene() {\n    if (pgn !== 0) {\n      if (url.includes('pg=' + pgn)) {\n        // set sceneCoords equal to the string stored in the scenes Array\n        var sceneCoords = this.scenes[pgn - 1];\n        // Create coordArray by spliting sceneCoords after every comma\n        var coordArray = sceneCoords.split(',');\n        // If no rotation is passed via the coordinates subfield in the backend, set rotation var equal to 0\n        if (coordArray[4] == null) {\n          coordArray[4] = 0;\n        } else {\n          this.viewer.viewport.setRotation(parseInt(coordArray[4], 10));\n        }\n        // Set scene to a new openseadragon rectangle, pass in all the coords from the array\n        // pass them through parseFloat so they are recognized as numbers not strings.\n        var scene = new OpenSeadragon.Rect(parseFloat(coordArray[0]), parseFloat(coordArray[1]), parseFloat(coordArray[2]), parseFloat(coordArray[3]));\n        this.viewer.viewport.fitBounds(scene, true);\n        // Debug\n        var viewerBounds = this.viewer.viewport.getBounds();\n        var viewerBoundsOuput = 'X: ' + viewerBounds.x + ', Y: ' + viewerBounds.y + ', W: ' + viewerBounds.width + ', H: ' + viewerBounds.height;\n        console.log('viewer.viewport.getBounds during buildScene:\\n' + viewerBoundsOuput);\n        console.log('scene var used in buildScene:\\nX: ' + scene.x + ', Y: ' + scene.y + ', W: ' + scene.width + ', H: ' + scene.height);\n        // End Debug\n        this.viewer.viewport.goHome = immediately => {\n          if (this.viewer) {\n            this.viewer.raiseEvent('home', {\n              immediately: immediately\n            });\n          }\n          this.buildHome(viewerBounds);\n        };\n      }\n    }\n  }\n}\nAnnotationOSDService.ɵfac = function AnnotationOSDService_Factory(t) {\n  return new (t || AnnotationOSDService)(i0.ɵɵinject(Boolean));\n};\nAnnotationOSDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AnnotationOSDService,\n  factory: AnnotationOSDService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","debounceTime","i0","AnnotationOSDService","constructor","debug","DEBUG","playerFactory","type","id","link","Promise","resolve","viewer","OpenSeadragon","tileSources","url","gestureSettingsTouch","pinchRotate","showRotationControl","showNavigationControl","showFlipControl","zoomPerClick","imageLoaderLimit","constrainDuringPan","debugMode","subjectZoom","addHandler","e","next","pipe","subscribe","calculateRatio","resetStrokeWidth","addOnceHandler","buildScene","subjectResize","goHome","delete","canvas","clear","dispose","removeListeners","destroy","addCanvas","fabricjsOverlay","scale","fabricCanvas","w","strokeWidth","getZoom","object","getObjects","set","get","imageWidth","source","dimensions","x","imageHeight","y","containerWidth","viewport","getContainerSize","containerHeight","zoomToZoomLevelRatio","setHome","point","width","height","t","Point","console","log","deltaPixelsFromPoints","windowToViewportCoordinates","buildHome","viewerBounds","includes","pgn","sceneCoords","scenes","coordArray","split","setRotation","parseInt","scene","Rect","parseFloat","fitBounds","getBounds","viewerBoundsOuput","immediately","raiseEvent","ɵfac","AnnotationOSDService_Factory","ɵɵinject","Boolean","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"sources":["/home/dove/Documents/tchek/AnnotationOSD/projects/annotation-osd/src/lib/annotation-osd.service.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AnnotationOSDService {\n    /**\n     * Constructor of service for init a new player.\n     * @param debug set true to active debug mode on player.\n     */\n    constructor(debug = false) {\n        this.DEBUG = debug;\n    }\n    /**\n     * Create a new player factory.\n     * @param type Type of player, dzi or image (jpeg, png, etc...)\n     * @param id Id of player inside html.\n     * @param link Link to image.\n     */\n    playerFactory(type, id, link) {\n        return new Promise((resolve) => {\n            this.viewer = OpenSeadragon({\n                id,\n                tileSources: type === 'dzi' ? link : { type: 'image', url: link },\n                gestureSettingsTouch: { pinchRotate: false },\n                showRotationControl: false,\n                showNavigationControl: false,\n                showFlipControl: false,\n                zoomPerClick: 1,\n                imageLoaderLimit: 1,\n                constrainDuringPan: true,\n                debugMode: this.DEBUG,\n            });\n            const subjectZoom = new Subject();\n            this.viewer.addHandler('zoom', (e) => {\n                subjectZoom.next(e);\n            });\n            subjectZoom.pipe(debounceTime(50)).subscribe(() => {\n                this.calculateRatio();\n                this.resetStrokeWidth();\n            });\n            this.viewer.addOnceHandler('open', () => {\n                this.calculateRatio();\n                resolve(this);\n            });\n            // on open, buildsScene\n            this.viewer.addHandler('open', () => {\n                this.buildScene();\n            });\n            const subjectResize = new Subject();\n            this.viewer.addHandler('resize', (e) => {\n                subjectResize.next(e);\n            });\n            subjectResize.pipe(debounceTime(200)).subscribe(() => {\n                this.goHome();\n            });\n        });\n    }\n    /**\n     * Delete all subscribers canvas and player.\n     */\n    delete() {\n        this.canvas.clear();\n        this.canvas.dispose();\n        this.canvas.removeListeners();\n        this.viewer.destroy();\n    }\n    /**\n     * Add fabric canvas over viewport\n     */\n    addCanvas() {\n        this.canvas = this.viewer\n            .fabricjsOverlay({ scale: 1000 })\n            .fabricCanvas();\n        return this;\n    }\n    /**\n     * Auto reset the size of fabric elements when user zoom on canvas, or page resize.\n     * @private\n     */\n    resetStrokeWidth() {\n        if (this.canvas) {\n            const w = 2; // desired width in pixels\n            const strokeWidth = w / this.canvas.getZoom();\n            for (const object of this.canvas.getObjects()) {\n                object.set('strokeUniform', true);\n                object.set('strokeWidth', strokeWidth);\n                // @ts-ignore\n                if (object.get('radius')) {\n                    // @ts-ignore\n                    object.set('radius', 5 / this.canvas.getZoom());\n                }\n                // can also update other things here\n            }\n        }\n    }\n    /**\n     * Calculate ratio of canvas when user load image or resize page.\n     * @private\n     */\n    calculateRatio() {\n        this.imageWidth = this.viewer.source.dimensions.x;\n        this.imageHeight = this.viewer.source.dimensions.y;\n        this.containerWidth = this.viewer.viewport.getContainerSize().x;\n        this.containerHeight = this.viewer.viewport.getContainerSize().y;\n        this.zoomToZoomLevelRatio = this.containerWidth / this.imageWidth;\n        this.scale = this.viewer.viewport.getZoom(true) * this.zoomToZoomLevelRatio;\n    }\n    /**\n     * Center canvas inside viewport or go to home point if exist.\n     */\n    async goHome() {\n        //this.viewer.viewport.goHome(false);\n        return this;\n    }\n    /**\n     * Set home point.\n     * @param point Point at center of region.\n     * @param width Width of region.\n     * @param height Height of region.\n     */\n    setHome(point, width, height) {\n        //this.viewer.viewport.zoomTo(5);\n        let t = new OpenSeadragon.Point(100, 100);\n        console.log(this.viewer.viewport.deltaPixelsFromPoints(t, true));\n        this.viewer.viewport.windowToViewportCoordinates(new OpenSeadragon.Point(100, 100));\n        // this.viewer.viewport.zoomTo(5);\n        // const homePoint = this.viewer.viewport.imageToViewerElementCoordinates(new OpenSeadragon.Point(this.imageWidth / 2, this.imageHeight / 2));\n        // const w = this.imageWidth / width;\n        // const h = this.imageHeight / height;\n        // const zoom = 4; // w > h ? h : w;\n        // console.log(homePoint, zoom, this.imageWidth, this.imageHeight);\n        // this.viewer.viewport.zoomTo(1.2, homePoint, false);\n        return this;\n    }\n    buildHome(viewerBounds) {\n        if (url.includes('pg=' + pgn)) {\n            // set sceneCoords equal to the string stored in the scenes Array\n            var sceneCoords = this.scenes[pgn - 1];\n            // Create coordArray by spliting sceneCoords after every comma\n            var coordArray = sceneCoords.split(',');\n            // If no rotation is passed via the coordinates subfield in the backend, set rotation var equal to 0\n            if (coordArray[4] == null) {\n                coordArray[4] = 0;\n            }\n            else {\n                this.viewer.viewport.setRotation(parseInt(coordArray[4], 10));\n            }\n            // Set scene to a new openseadragon rectangle, pass in all the coords from the ViewerBounds passed when the scene was built on page load\n            var scene = new OpenSeadragon.Rect(parseFloat(viewerBounds.x), parseFloat(viewerBounds.y), parseFloat(viewerBounds.width), parseFloat(viewerBounds.height));\n            this.viewer.viewport.fitBounds(scene, true);\n            // Debug\n            console.log('scene var used in buildHome (should match viewer.viewport.getBounds during buildScene):\\nX: ' + scene.x + ', Y: ' + scene.y + ', W: ' + scene.width + ', H: ' + scene.height);\n        }\n    }\n    // Checks page url, depending on page number, loads the proper rectangle defined above, remaps the homebtn to match the scene built from this\n    buildScene() {\n        if (pgn !== 0) {\n            if (url.includes('pg=' + pgn)) {\n                // set sceneCoords equal to the string stored in the scenes Array\n                var sceneCoords = this.scenes[pgn - 1];\n                // Create coordArray by spliting sceneCoords after every comma\n                var coordArray = sceneCoords.split(',');\n                // If no rotation is passed via the coordinates subfield in the backend, set rotation var equal to 0\n                if (coordArray[4] == null) {\n                    coordArray[4] = 0;\n                }\n                else {\n                    this.viewer.viewport.setRotation(parseInt(coordArray[4], 10));\n                }\n                // Set scene to a new openseadragon rectangle, pass in all the coords from the array\n                // pass them through parseFloat so they are recognized as numbers not strings.\n                var scene = new OpenSeadragon.Rect(parseFloat(coordArray[0]), parseFloat(coordArray[1]), parseFloat(coordArray[2]), parseFloat(coordArray[3]));\n                this.viewer.viewport.fitBounds(scene, true);\n                // Debug\n                var viewerBounds = this.viewer.viewport.getBounds();\n                var viewerBoundsOuput = 'X: ' + viewerBounds.x + ', Y: ' + viewerBounds.y + ', W: ' + viewerBounds.width + ', H: ' + viewerBounds.height;\n                console.log('viewer.viewport.getBounds during buildScene:\\n' + viewerBoundsOuput);\n                console.log('scene var used in buildScene:\\nX: ' + scene.x + ', Y: ' + scene.y + ', W: ' + scene.width + ', H: ' + scene.height);\n                // End Debug\n                this.viewer.viewport.goHome = (immediately) => {\n                    if (this.viewer) {\n                        this.viewer.raiseEvent('home', {\n                            immediately: immediately\n                        });\n                    }\n                    this.buildHome(viewerBounds);\n                };\n            }\n        }\n    }\n}\nAnnotationOSDService.ɵfac = function AnnotationOSDService_Factory(t) { return new (t || AnnotationOSDService)(i0.ɵɵinject(Boolean)); };\nAnnotationOSDService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AnnotationOSDService, factory: AnnotationOSDService.ɵfac, providedIn: 'root' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}