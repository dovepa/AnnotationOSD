{"ast":null,"code":"import _asyncToGenerator from \"/home/dove/Documents/tchek/AnnotationOSD/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { MarkerPoly } from './reactive-palyer.model';\nimport '../../assets/openseadragon.min';\n//import '../../assets/fabric.adapted';\nimport '../../assets/openseadragon-fabricjs-overlay';\nimport * as i0 from \"@angular/core\";\n// declare let fabric: TypeFabric;\nexport class AnnotationOSDService {\n  constructor(debug = false) {\n    this.DEBUG = debug;\n  }\n  playerFactory(type, id, link) {\n    return new Promise(resolve => {\n      this.viewer = OpenSeadragon({\n        id,\n        tileSources: type === 'dzi' ? link : {\n          type: 'image',\n          url: link\n        },\n        gestureSettingsTouch: {\n          pinchRotate: false\n        },\n        showRotationControl: false,\n        showNavigationControl: false,\n        showFlipControl: false,\n        zoomPerClick: 1,\n        imageLoaderLimit: 1,\n        constrainDuringPan: true,\n        debugMode: this.DEBUG\n      });\n      const subjectZoom = new Subject();\n      this.viewer.addHandler('zoom', e => {\n        subjectZoom.next(e);\n      });\n      subjectZoom.pipe(debounceTime(50)).subscribe(() => {\n        this.calculateRatio();\n        // this.resetStrokeWidth();\n      });\n\n      this.viewer.addOnceHandler('open', () => {\n        console.log('open');\n        this.calculateRatio();\n        resolve(this);\n      });\n      const subjectResize = new Subject();\n      this.viewer.addHandler('resize', e => {\n        subjectResize.next(e);\n      });\n      subjectResize.pipe(debounceTime(200)).subscribe(() => {\n        this.goHome();\n      });\n    });\n  }\n  //\n  // public setHome(point: Point, width: number, height: number) {\n  //   const homePoint = this.viewer.viewport.imageToViewerElementCoordinates(new OSD.Point(this.imageWidth / 2, this.imageHeight / 2));\n  //   const w = this.imageWidth / width;\n  //   const h = this.imageHeight / height;\n  //   const zoom = 4; // w > h ? h : w;\n  //   console.log(homePoint, zoom, this.imageWidth, this.imageHeight);\n  //   this.viewer.viewport.zoomTo(1.2, homePoint, false);\n  // }\n  // private resetStrokeWidth() {\n  //   if (this.canvas) {\n  //     const w = 2; // desired width in pixels\n  //     const strokeWidth = w / this.canvas.getZoom();\n  //     for (const object of this.canvas.getObjects()) {\n  //       object.set('strokeUniform', true);\n  //       object.set('strokeWidth', strokeWidth);\n  //       if (object.get('radius')) {\n  //         object.set('radius', 5 / this.canvas.getZoom());\n  //       }\n  //       // can also update other things here\n  //     }\n  //   }\n  // }\n  calculateRatio() {\n    // this.imageWidth = this.viewer.source.dimensions.x;\n    // this.imageHeight = this.viewer.source.dimensions.y;\n    // this.containerWidth = this.viewer.viewport.getContainerSize().x;\n    // this.containerHeight = this.viewer.viewport.getContainerSize().y;\n    // this.zoomToZoomLevelRatio = this.containerWidth / this.imageWidth;\n    // this.scale = this.viewer.viewport.getZoom(true) * this.zoomToZoomLevelRatio;\n  }\n  goHome() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // if (!this.home) this.viewer.viewport.goHome(false);\n      // else this.viewer.viewport.fitBounds(this.home, false);\n      // this.setHome(null, null, null);\n      return _this;\n    })();\n  }\n  addCanvas() {\n    this.canvas = this.viewer.fabricjsOverlay({\n      scale: this.imageWidth * this.scale\n    }).fabricCanvas();\n    return this;\n  }\n  addDamage(damage) {\n    const strokeWidth = 2;\n    let obj;\n    if (!(damage instanceof MarkerPoly)) {\n      obj = new fabric.Rect({\n        id: 1,\n        left: (damage.unit === 'percent' ? damage.centerX * (this.imageWidth * this.scale) : damage.centerX * this.scale) + strokeWidth,\n        top: (damage.unit === 'percent' ? damage.centerY * (this.imageHeight * this.scale) : damage.centerY * this.scale) + strokeWidth,\n        width: damage.unit === 'percent' ? damage.width * (this.imageWidth * this.scale) : damage.width * this.scale,\n        height: damage.unit === 'percent' ? damage.height * (this.imageHeight * this.scale) : damage.height * this.scale,\n        strokeWidth,\n        strokeUniform: true,\n        strokeDashArray: undefined,\n        originX: 'center',\n        originY: 'center',\n        cornerStyle: 'circle',\n        // Add data option for style settings\n        fill: 'transparent',\n        stroke: 'red',\n        selectable: true,\n        hasBorders: false,\n        cornerColor: 'red',\n        transparentCorners: false,\n        draggable: true,\n        lockRotation: true,\n        hasControls: true\n      });\n      obj.set('strokeUniform', true);\n      obj.setControlsVisibility({\n        mtr: false\n      });\n      this.canvas.add(obj);\n    }\n  }\n}\nAnnotationOSDService.ɵfac = function AnnotationOSDService_Factory(t) {\n  return new (t || AnnotationOSDService)(i0.ɵɵinject(Boolean));\n};\nAnnotationOSDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AnnotationOSDService,\n  factory: AnnotationOSDService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","debounceTime","MarkerPoly","i0","AnnotationOSDService","constructor","debug","DEBUG","playerFactory","type","id","link","Promise","resolve","viewer","OpenSeadragon","tileSources","url","gestureSettingsTouch","pinchRotate","showRotationControl","showNavigationControl","showFlipControl","zoomPerClick","imageLoaderLimit","constrainDuringPan","debugMode","subjectZoom","addHandler","e","next","pipe","subscribe","calculateRatio","addOnceHandler","console","log","subjectResize","goHome","addCanvas","canvas","fabricjsOverlay","scale","imageWidth","fabricCanvas","addDamage","damage","strokeWidth","obj","fabric","Rect","left","unit","centerX","top","centerY","imageHeight","width","height","strokeUniform","strokeDashArray","undefined","originX","originY","cornerStyle","fill","stroke","selectable","hasBorders","cornerColor","transparentCorners","draggable","lockRotation","hasControls","set","setControlsVisibility","mtr","add","ɵfac","AnnotationOSDService_Factory","t","ɵɵinject","Boolean","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"sources":["/home/dove/Documents/tchek/AnnotationOSD/projects/annotation-osd/src/lib/annotation-osd.service.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { MarkerPoly, } from './reactive-palyer.model';\nimport '../../assets/openseadragon.min';\n//import '../../assets/fabric.adapted';\nimport '../../assets/openseadragon-fabricjs-overlay';\nimport * as i0 from \"@angular/core\";\n// declare let fabric: TypeFabric;\nexport class AnnotationOSDService {\n    constructor(debug = false) {\n        this.DEBUG = debug;\n    }\n    playerFactory(type, id, link) {\n        return new Promise((resolve) => {\n            this.viewer = OpenSeadragon({\n                id,\n                tileSources: type === 'dzi' ? link : { type: 'image', url: link },\n                gestureSettingsTouch: { pinchRotate: false },\n                showRotationControl: false,\n                showNavigationControl: false,\n                showFlipControl: false,\n                zoomPerClick: 1,\n                imageLoaderLimit: 1,\n                constrainDuringPan: true,\n                debugMode: this.DEBUG,\n            });\n            const subjectZoom = new Subject();\n            this.viewer.addHandler('zoom', (e) => {\n                subjectZoom.next(e);\n            });\n            subjectZoom.pipe(debounceTime(50)).subscribe(() => {\n                this.calculateRatio();\n                // this.resetStrokeWidth();\n            });\n            this.viewer.addOnceHandler('open', () => {\n                console.log('open');\n                this.calculateRatio();\n                resolve(this);\n            });\n            const subjectResize = new Subject();\n            this.viewer.addHandler('resize', (e) => {\n                subjectResize.next(e);\n            });\n            subjectResize.pipe(debounceTime(200)).subscribe(() => {\n                this.goHome();\n            });\n        });\n    }\n    //\n    // public setHome(point: Point, width: number, height: number) {\n    //   const homePoint = this.viewer.viewport.imageToViewerElementCoordinates(new OSD.Point(this.imageWidth / 2, this.imageHeight / 2));\n    //   const w = this.imageWidth / width;\n    //   const h = this.imageHeight / height;\n    //   const zoom = 4; // w > h ? h : w;\n    //   console.log(homePoint, zoom, this.imageWidth, this.imageHeight);\n    //   this.viewer.viewport.zoomTo(1.2, homePoint, false);\n    // }\n    // private resetStrokeWidth() {\n    //   if (this.canvas) {\n    //     const w = 2; // desired width in pixels\n    //     const strokeWidth = w / this.canvas.getZoom();\n    //     for (const object of this.canvas.getObjects()) {\n    //       object.set('strokeUniform', true);\n    //       object.set('strokeWidth', strokeWidth);\n    //       if (object.get('radius')) {\n    //         object.set('radius', 5 / this.canvas.getZoom());\n    //       }\n    //       // can also update other things here\n    //     }\n    //   }\n    // }\n    calculateRatio() {\n        // this.imageWidth = this.viewer.source.dimensions.x;\n        // this.imageHeight = this.viewer.source.dimensions.y;\n        // this.containerWidth = this.viewer.viewport.getContainerSize().x;\n        // this.containerHeight = this.viewer.viewport.getContainerSize().y;\n        // this.zoomToZoomLevelRatio = this.containerWidth / this.imageWidth;\n        // this.scale = this.viewer.viewport.getZoom(true) * this.zoomToZoomLevelRatio;\n    }\n    async goHome() {\n        // if (!this.home) this.viewer.viewport.goHome(false);\n        // else this.viewer.viewport.fitBounds(this.home, false);\n        // this.setHome(null, null, null);\n        return this;\n    }\n    addCanvas() {\n        this.canvas = this.viewer\n            .fabricjsOverlay({ scale: this.imageWidth * this.scale })\n            .fabricCanvas();\n        return this;\n    }\n    addDamage(damage) {\n        const strokeWidth = 2;\n        let obj;\n        if (!(damage instanceof MarkerPoly)) {\n            obj = new fabric.Rect({\n                id: 1,\n                left: (damage.unit === 'percent' ? damage.centerX * (this.imageWidth * this.scale)\n                    : damage.centerX * this.scale) + strokeWidth,\n                top: (damage.unit === 'percent' ? damage.centerY * (this.imageHeight * this.scale)\n                    : damage.centerY * this.scale) + strokeWidth,\n                width: (damage.unit === 'percent' ? damage.width * (this.imageWidth * this.scale)\n                    : damage.width * this.scale),\n                height: (damage.unit === 'percent' ? damage.height * (this.imageHeight * this.scale)\n                    : damage.height * this.scale),\n                strokeWidth,\n                strokeUniform: true,\n                strokeDashArray: undefined,\n                originX: 'center',\n                originY: 'center',\n                cornerStyle: 'circle',\n                // Add data option for style settings\n                fill: 'transparent',\n                stroke: 'red',\n                selectable: true,\n                hasBorders: false,\n                cornerColor: 'red',\n                transparentCorners: false,\n                draggable: true,\n                lockRotation: true,\n                hasControls: true,\n            });\n            obj.set('strokeUniform', true);\n            obj.setControlsVisibility({ mtr: false });\n            this.canvas.add(obj);\n        }\n    }\n}\nAnnotationOSDService.ɵfac = function AnnotationOSDService_Factory(t) { return new (t || AnnotationOSDService)(i0.ɵɵinject(Boolean)); };\nAnnotationOSDService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AnnotationOSDService, factory: AnnotationOSDService.ɵfac, providedIn: 'root' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}