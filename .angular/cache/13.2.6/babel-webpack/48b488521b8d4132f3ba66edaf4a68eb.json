{"ast":null,"code":"import _asyncToGenerator from \"/home/dove/Documents/tchek/AnnotationOSD/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AnnotationOSDService = /*#__PURE__*/(() => {\n  class AnnotationOSDService {\n    constructor(debug = false) {\n      this.DEBUG = debug;\n    }\n    playerFactory(type, id, link) {\n      return new Promise(resolve => {\n        this.viewer = OpenSeadragon({\n          id,\n          tileSources: type === 'dzi' ? link : {\n            type: 'image',\n            url: link\n          },\n          gestureSettingsTouch: {\n            pinchRotate: false\n          },\n          showRotationControl: false,\n          showNavigationControl: false,\n          showFlipControl: false,\n          zoomPerClick: 1,\n          imageLoaderLimit: 1,\n          constrainDuringPan: true,\n          debugMode: this.DEBUG\n        });\n        const subjectZoom = new Subject();\n        this.viewer.addHandler('zoom', e => {\n          subjectZoom.next(e);\n        });\n        subjectZoom.pipe(debounceTime(50)).subscribe(() => {\n          this.calculateRatio();\n          // this.resetStrokeWidth();\n        });\n\n        this.viewer.addOnceHandler('open', () => {\n          console.log('open');\n          this.calculateRatio();\n          resolve(this);\n        });\n        const subjectResize = new Subject();\n        this.viewer.addHandler('resize', e => {\n          subjectResize.next(e);\n        });\n        subjectResize.pipe(debounceTime(200)).subscribe(() => {\n          this.goHome();\n        });\n      });\n    }\n    //\n    // public setHome(point: Point, width: number, height: number) {\n    //   const homePoint = this.viewer.viewport.imageToViewerElementCoordinates(new OSD.Point(this.imageWidth / 2, this.imageHeight / 2));\n    //   const w = this.imageWidth / width;\n    //   const h = this.imageHeight / height;\n    //   const zoom = 4; // w > h ? h : w;\n    //   console.log(homePoint, zoom, this.imageWidth, this.imageHeight);\n    //   this.viewer.viewport.zoomTo(1.2, homePoint, false);\n    // }\n    // private resetStrokeWidth() {\n    //   if (this.canvas) {\n    //     const w = 2; // desired width in pixels\n    //     const strokeWidth = w / this.canvas.getZoom();\n    //     for (const object of this.canvas.getObjects()) {\n    //       object.set('strokeUniform', true);\n    //       object.set('strokeWidth', strokeWidth);\n    //       if (object.get('radius')) {\n    //         object.set('radius', 5 / this.canvas.getZoom());\n    //       }\n    //       // can also update other things here\n    //     }\n    //   }\n    // }\n    calculateRatio() {\n      // this.imageWidth = this.viewer.source.dimensions.x;\n      // this.imageHeight = this.viewer.source.dimensions.y;\n      // this.containerWidth = this.viewer.viewport.getContainerSize().x;\n      // this.containerHeight = this.viewer.viewport.getContainerSize().y;\n      // this.zoomToZoomLevelRatio = this.containerWidth / this.imageWidth;\n      // this.scale = this.viewer.viewport.getZoom(true) * this.zoomToZoomLevelRatio;\n    }\n    goHome() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // if (!this.home) this.viewer.viewport.goHome(false);\n        // else this.viewer.viewport.fitBounds(this.home, false);\n        // this.setHome(null, null, null);\n        return _this;\n      })();\n    }\n    addCanvas() {\n      this.canvas = this.viewer.fabricjsOverlay({\n        scale: 1000\n      }).fabricCanvas();\n      return this;\n    }\n    addDamage(damage) {\n      const poly = new fabric.Polygon([{\n        x: 200,\n        y: 10\n      }, {\n        x: 250,\n        y: 50\n      }, {\n        x: 250,\n        y: 180\n      }, {\n        x: 150,\n        y: 180\n      }, {\n        x: 150,\n        y: 50\n      }], {\n        fill: 'green',\n        opacity: 0.3\n      });\n      this.canvas.add(poly);\n    }\n  }\n  AnnotationOSDService.ɵfac = function AnnotationOSDService_Factory(t) {\n    return new (t || AnnotationOSDService)(i0.ɵɵinject(Boolean));\n  };\n  AnnotationOSDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnnotationOSDService,\n    factory: AnnotationOSDService.ɵfac,\n    providedIn: 'root'\n  });\n  return AnnotationOSDService;\n})();","map":null,"metadata":{},"sourceType":"module"}